The first thing that should always be done when undertaking a large-scale coding project such as this is to import any modules that may be needed. This can be done using the "import" 
command followed by the name of whatever module that you want to utilize. This is shown in our very first cell of code. Modules such as herbie, cartopy, and xarray were particularly useful 
for this project. Next, under the "Loading Herbie Functions" tab, we used the aforementioned herbie module to obtain our euro model run for the initial requirements of the project. By 
initializing an initial run date and time, we can use the FastHerbie function to specify the model we want to use (EURO in this case), how many hours we want to go out, how big the timestamp 
between each run is:
H = FastHerbie([run], model="ifs", product="oper", fxx=np.arange(0,252,12).tolist(), save_dir='~/meteo473_groupwork/group2/data/')
It's important to note that the "run" variable within the Herbie function is established prior to establishing "H". If a different run is to be chosen, change the date and time (in UTC) in "run" to your desired run.
From there, we can pick a variable out of the run data to save as an xarray dataset. In this case, we initially chose 500 mb heights. We also needed to verify the dataset in order to download 
hour zero for each run to make sure they match with the valid times from the run. We completed this by developing a function named "verifset" which reterns the ECMWF verification dataset 
through 10 days out from the run time. 

When it came to developing the many plots we created for this project, Hunter utilized another function he created called "mercplot" whioch creates a miller basemap of the Continental United 
States that we can then plot any variables we wanted onto. Meghan also developed a custom colormap to use for defining geopotential heights on the map. We decided to go with a purely blue and 
red colormap because geopotential height can typically be used as a proxy for the temperature of the air. 

Much of this project ended up being a lot of repeated and recycled code applied to different variables or different models. Much of the same principles apply to doing similar things and it 
could simply be a matter of copying a line of code, changing a variable name, and changing "ifs" to "gfs" for example:
H = FastHerbie([run], model="ifs", product="oper", fxx=np.arange(0,252,12).tolist(), save_dir='~/meteo473_groupwork/group2/data/')
to
Hgfs = FastHerbie([run], model="gfs", fxx=np.arange(0,252,12).tolist(), save_dir='~/meteo473_groupwork/group2/data/')

Ultimately, this code is highly flexible and can be used with any model dataset for any date/time and any parameter, as long as a few simple changes are made.


